config {
  schema: "curated",
  type: "table"
}

WITH
campagna_canvass as (

    SELECT 
        campagna_canvass_cd,
        campagna_canvass_ds,
        campagna_anno_cd,
        campagna_anno_ds,
        tipo_campagna_cd,
        tipo_campagna_ds,
        tipo_esercizio_cd,
        tipo_esercizio_ds,
        esercizio_cd,
        esercizio_ds
    FROM ${ref("stg_board_campagna_canvass")}

),

consuntivo_py AS (

    SELECT
      (CAST(LEFT(cons.campagna_canvass_cd, 2) AS INT) + 1)  || SUBSTRING(cons.campagna_canvass_cd,3) AS campagna_canvass_cd
    FROM bli-bi-commerciale-test-001.staging.stg_board_consuntivo AS cons

),

nuove_campagne AS (

    SELECT DISTINCT 
        cons_py.campagna_canvass_cd, 
        cons_py.campagna_canvass_cd as campagna_canvass_ds,
        LEFT(cons_py.campagna_canvass_cd,3) as campagna_anno_cd,
        LEFT(cons_py.campagna_canvass_cd,3) as campagna_anno_ds,
        SUBSTRING(cons_py.campagna_canvass_cd,3,1) as tipo_campagna_cd,
        SUBSTRING(cons_py.campagna_canvass_cd,3,1) as tipo_campagna_ds,
        'FY' as tipo_esercizio_cd,
        'Futuro' as tipo_esercizio_ds,
        LEFT(cons_py.campagna_canvass_cd,2) || '/' || CAST(CAST(LEFT(cons_py.campagna_canvass_cd,2) AS INTEGER)  + 1 AS STRING) as esercizio_cd,
        LEFT(cons_py.campagna_canvass_cd,2) || '/' || CAST(CAST(LEFT(cons_py.campagna_canvass_cd,2) AS INTEGER)  + 1 AS STRING) as esercizio_ds
    FROM consuntivo_py as cons_py
    LEFT JOIN bli-bi-commerciale-test-001.curated.cur_md_campagna_canvass AS cc
    ON cons_py.campagna_canvass_cd = cc.campagna_canvass_cd
    WHERE cc.campagna_canvass_cd IS NULL

),

final as (
      
    SELECT *
    FROM campagna_canvass
    UNION ALL
    SELECT *
    FROM nuove_campagne

)

SELECT
    campagna_canvass_cd,
    campagna_canvass_ds,
    campagna_anno_cd,
    campagna_anno_ds,
    tipo_campagna_cd,
    tipo_campagna_ds,
    tipo_esercizio_cd,
    tipo_esercizio_ds,
    esercizio_cd,
    esercizio_ds,
    CASE
        WHEN tipo_esercizio_cd = 'EPE' THEN
            CASE  
                WHEN (CAST(FORMAT_DATE('%y', CURRENT_DATE()) AS INT64) - CAST(LEFT(esercizio_cd,2) AS INT64)) = 1
                THEN PARSE_TIMESTAMP('%d/%m/%y', CONCAT('01/01/', CAST(LEFT(esercizio_cd,2) AS STRING)))
                ELSE PARSE_TIMESTAMP('%d/%m/%y', CONCAT('01/01/', CAST(CAST(LEFT(esercizio_cd,2) AS INT64) + 1 AS STRING))) 
            END  -- se (anno corrente - anno esercizio) = 1, usa l'anno di esercizio, altrimenti usa anno + 1
        
        WHEN tipo_esercizio_cd = 'ECA' THEN
            CASE 
                WHEN (CAST(FORMAT_DATE('%y', CURRENT_DATE()) AS INT64) - CAST(LEFT(esercizio_cd,2) AS INT64)) = 0
                THEN PARSE_TIMESTAMP('%d/%m/%y', CONCAT('01/01/', CAST(LEFT(esercizio_cd,2) AS STRING)))
                ELSE PARSE_TIMESTAMP('%d/%m/%y', CONCAT('01/01/', CAST(CAST(LEFT(esercizio_cd,2) AS INT64) + 1 AS STRING)))
            END -- se (anno corrente - anno esercizio) = 0, usa l'anno di esercizio, altrimenti usa anno + 1
        
        ELSE PARSE_TIMESTAMP('%d/%m/%y', '01/01/99')
    END AS data_aggiornamento_ts,
    CURRENT_TIMESTAMP() as load_timestamp
FROM final